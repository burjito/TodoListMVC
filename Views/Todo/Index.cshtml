@model List<TodoListMVC.Models.TodoItem>
@using TodoListMVC.Models
@{
    ViewData["Title"] = "Task List";
    var currentSort = ViewData["CurrentSort"] as string ?? "";
    var categories = ViewData["Categories"] as List<Category> ?? new List<Category>();

    var selectedCategory = Context.Request.Query["category"].ToString();
    var selectedPriority = Context.Request.Query["priority"].ToString();
    var selectedStatus = Context.Request.Query["status"].ToString();
    var showHidden = Context.Request.Query["showHidden"].ToString() == "true";
}
<div class="container mt-4">
    <h2 class="mb-3">To-Do List</h2>

    <form method="get" class="row g-3 mb-4 align-items-center">
        <div class="col-md-2">
            <select name="category" class="form-select">
                <option value="">All Categories</option>
                @foreach (var cat in categories)
                {
                    var selected = (selectedCategory == cat.Id.ToString()) ? "selected" : "";
                    @Html.Raw($"<option value=\"{cat.Id}\" {selected}>{cat.Name}</option>")
                }
            </select>
        </div>
        <div class="col-md-2">
            <select name="priority" class="form-select">
                <option value="">All Priorities</option>
                @foreach (var p in Enum.GetNames(typeof(Priority)))
                {
                    var selected = (selectedPriority == p) ? "selected" : "";
                    @Html.Raw($"<option value=\"{p}\" {selected}>{p}</option>")
                }
            </select>
        </div>
        <div class="col-md-2">
            <select name="status" class="form-select">
                <option value="">All Statuses</option>
                @foreach (var s in Enum.GetNames(typeof(Status)))
                {
                    var selected = (selectedStatus == s) ? "selected" : "";
                    @Html.Raw($"<option value=\"{s}\" {selected}>{s}</option>")
                }
            </select>
        </div>
        <div class="col-md-2">
            <select name="sortOrder" class="form-select">
                <option value="">Sort By</option>
                @{
                    var sortOptions = new Dictionary<string, string>
                    {
                        { "title_asc", "Title A - Z" },
                        { "title_desc", "Title Z - A" },
                        { "priority_asc", "Priority Low to High" },
                        { "priority_desc", "Priority High to Low" }
                    };

                    foreach (var opt in sortOptions)
                    {
                        var selected = (currentSort == opt.Key) ? "selected" : "";
                        @Html.Raw($"<option value=\"{opt.Key}\" {selected}>{opt.Value}</option>")
                    }
                }
            </select>
        </div>

        <div class="col-md-2 d-flex align-items-center">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>

        <div class="col-md d-flex justify-content-end align-items-center">
            <a class="btn btn-success" href="/Todo/Create">New Task</a>
        </div>
    </form>

    <!-- Show Hidden Toggle - in a separate form -->
    <form method="get" class="mb-3">
        <input type="hidden" name="showHidden" value="@(showHidden ? "false" : "true")" />
        <input type="hidden" name="category" value="@selectedCategory" />
        <input type="hidden" name="priority" value="@selectedPriority" />
        <input type="hidden" name="status" value="@selectedStatus" />
        <input type="hidden" name="sortOrder" value="@currentSort" />
        <button type="submit" class="btn btn-outline-secondary @(showHidden ? "active" : "")">
            @(showHidden ? "Hide Hidden" : "Show Hidden Items")
        </button>
    </form>

    <table class="table table-bordered table-hover align-middle">
        <thead class="table-dark" style="background-color:#e9ecef; color:#212529;">
            <tr>
                <th style="width:36%;">Title</th>
                <th style="width:13%;">Category</th>
                <th style="width:13%;">Priority</th>
                <th style="width:13%;">Status</th>
                <th style="width:25%;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                if (item.IsHidden && !showHidden)
                {
                    continue;
                }

                string statusClass = item.Status switch
                {
                    Status.Pending => "badge bg-warning text-dark",
                    Status.Done => "badge bg-success",
                    _ => "badge bg-secondary"
                };

                <tr>
                    <td>@item.Title</td>
                    <td>@item.Category?.Name</td>
                    <td>@item.Priority</td>
                    <td>
                        <span class="@statusClass">@item.Status</span>
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary btn-sm me-1">View</a>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm me-1">Edit</a>

                        <form asp-action="ToggleHide" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@item.Id" />
                            <input type="hidden" name="showHidden" value="@(showHidden)" />
                            <button type="submit" class="btn btn-secondary btn-sm me-1">
                                @(item.IsHidden ? "Unhide" : "Hide")
                            </button>
                        </form>

                        <form asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this task?');">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@item.Id" />
                            <button type="submit" class="btn btn-danger btn-sm me-1">Delete</button>
                        </form>

                        @if (item.Status != Status.Done)
                        {
                            <form asp-action="MarkAsDone" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@item.Id" />
                                <button type="submit" class="btn btn-success btn-sm">Done</button>
                            </form>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
